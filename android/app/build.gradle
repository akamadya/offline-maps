def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

android {    
    compileSdkVersion 34
    //ndkVersion flutter.ndkVersion
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    def app_alias_name = "Optima"
    def versionPropsFile = file('version.properties')

    if(versionPropsFile.canRead()){
        Properties version = new Properties()
        version.load(new FileInputStream(versionPropsFile))
        
        def version_major = version['VERSION_MAJOR'].toInteger()
        def version_minor = version['VERSION_MINOR'].toInteger()
        def version_maintenance = version['VERSION_MAINTENANCE'].toInteger()
        def version_build = version['VERSION_BUILD'].toInteger() + 1
        def version_code = version['VERSION_CODE'].toInteger()

        version['VERSION_MAJOR'] = version_major.toString()
        version['VERSION_MINOR'] = version_minor.toString()
        version['VERSION_MAINTENANCE'] = version_maintenance.toString()
        version['VERSION_BUILD'] = version_build.toString()
        version['VERSION_CODE'] = version_code.toString()

        version.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
            applicationId "com.taspen.paos"
            // You can update the following values to match your application needs.
            // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
            multiDexEnabled true
            minSdkVersion 23
            targetSdkVersion 33
            versionCode version_code
            versionName "${version_major}.${version_minor}.${version_maintenance}.${version_build}"
        }
    }

    flavorDimensions "default"
    productFlavors { 
        production {
            dimension "default"
            applicationIdSuffix ""
        }
        staging {
            dimension "default"
            applicationIdSuffix ".stag"
            versionNameSuffix ' Stag'
        }        
        development {
            dimension "default"
            applicationIdSuffix ".dev"
            versionNameSuffix ' Dev'
        }
    }

    signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
    }

    buildTypes {
        release {
            debuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation "androidx.multidex:multidex:2.0.1"    
}
